// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model User {
  id              String           @id @default(cuid())
  name            String?
  email           String?          @unique
  emailVerified   DateTime?
  image           String?
  passwordHash    String?
  accounts        Account[]
  sessions        Session[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  role            Role             @default(GUEST)
  projectComments ProjectComment[]
  storiesCreated  Story[]
  storyComments   StoryComment[]
  epicsCreated    Epic[]
  epicComments    EpicComment[]
  tasksCreated    Task[]
  taskComments    TaskComment[]
}

enum Role {
  GUEST
  DEVELOPER
  TESTER
  MANAGER
  ADMIN
}

model Project {
  id                   String           @id @default(cuid())
  title                String           @unique
  client               String
  attachments          String[]
  deadline             DateTime
  completionPercentage Int
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @updatedAt
  stories              Story[]
  projectComments      ProjectComment[]
}

model ProjectComment {
  id        String   @id @default(cuid())
  content   String
  creatorId String
  creator   User     @relation(fields: [creatorId], references: [id])
  projectId String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Story {
  id            String         @id @default(cuid())
  title         String
  description   String
  attachments   String[]
  storyStatusId Int
  storyStatus   StoryStatus    @relation(fields: [storyStatusId], references: [id])
  projectId     String
  project       Project        @relation(fields: [projectId], references: [id], onDelete: Cascade)
  creatorId     String
  creator       User           @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  deadline      DateTime
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  epics         Epic[]
  storyComments StoryComment[]
}

model StoryStatus {
  id      Int     @id @default(autoincrement())
  name    String
  stories Story[]
}

model StoryComment {
  id        String   @id @default(cuid())
  content   String
  creatorId String
  creator   User     @relation(fields: [creatorId], references: [id])
  storyId   String
  story     Story    @relation(fields: [storyId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Epic {
  id           String        @id @default(cuid())
  title        String
  description  String
  attachments  String[]
  creatorId    String
  creator      User          @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  epicStatusId Int
  epicStatus   EpicStatus    @relation(fields: [epicStatusId], references: [id])
  storyId      String
  story        Story         @relation(fields: [storyId], references: [id], onDelete: Cascade)
  deadline     DateTime
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  epicComments EpicComment[]
  tasks        Task[]
}

model EpicStatus {
  id    Int    @id @default(autoincrement())
  name  String
  epics Epic[]
}

model EpicComment {
  id        String   @id @default(cuid())
  content   String
  creatorId String
  creator   User     @relation(fields: [creatorId], references: [id])
  epicId    String
  epic      Epic     @relation(fields: [epicId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Task {
  id               String        @id @default(cuid())
  title            String
  description      String
  attachments      String[]
  assignedUsersIds String[]
  taskStatusId     Int
  taskStatus       TaskStatus    @relation(fields: [taskStatusId], references: [id])
  creatorId        String
  creator          User          @relation(fields: [creatorId], references: [id])
  epicId           String
  epic             Epic          @relation(fields: [epicId], references: [id], onDelete: Cascade)
  deadline         DateTime
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  taskComments     TaskComment[]
}

model TaskStatus {
  id    Int    @id @default(autoincrement())
  name  String
  tasks Task[]
}

model TaskComment {
  id        String   @id @default(cuid())
  content   String
  creatorId String
  creator   User     @relation(fields: [creatorId], references: [id])
  taskId    String
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  refresh_token_expires_in Int?
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
